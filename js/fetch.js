// опишите функции взаимодействия c удалённым сервером с помощью fetch для получения и отправки данных. Актуальный адрес сервера вы найдёте в техзадании.
const BASE_URL = 'https://28.javascript.pages.academy/kekstagram';
const Route = {
  GET_DATA: '/data',
  SEND_DATA: '/',
};
const Method = {
  GET: 'GET',
  POST: 'POST',
};
const ErrorText = {
  GET_DATA: 'Не удалось загрузить данные. Попробуйте обновить станицу',
  SEND_DATA: 'Ну удалось отправить форму. Попробуйте еще раз'
};
const load = (route, errorText, method = Method.GET, body = null) =>
  fetch(`${BASE_URL}&{route}`, {method, body})
    .then((response) => {
      if (!response.ok) {
        throw new Error();
      }
      return response.json();
    });
const getData = () => load(Route.GET_DATA, ErrorText.GET_DATA);
const sendData = (body) => load(Route.SEND_DATA, Method.POST, body);

export {getData, sendData};


// в main.js
// setOnFormSubmit(asink(data) => {
//   try {
//     await sendData(data);
//     closerModal();
//     showSuccessMessage();
//   } catch {
//     showErrorMessage();
//   }
// });
// try {
//   const data = await getData();
//   renderGallery(data);
// } catch (err) {
//   showAllert(err.message);
// }


// Подключите модуль в проект.
// Доработайте модуль для отрисовки фотографий так, чтобы в качестве данных использовались не случайно сгенерированные объекты, а те данные,
// которые вы загрузите с удалённого сервера.
// ЗАГРУЗКА
// Просмотр загруженных изображений
// 4.1. Загрузка изображений от других пользователей производится сразу после открытия страницы с удалённого сервера: https://28.javascript.pages.academy/kekstagram/data.

// 4.2. Если при загрузке данных с сервера произошла ошибка запроса, нужно показать соответствующее сообщение. Дизайн блока с сообщением нужно придумать самостоятельно.

// ОТПРАВКА
// Сейчас наша форма работает просто: при нажатии на кнопку «Опубликовать» происходит перенаправление на адрес, указанный в атрибуте action. Это не совсем удобно,
// и если оставить всё как есть,
// пользователю придётся самостоятельно возвращаться назад. Стоит ли говорить, что это далеко не оптимальное решение. Поэтому данные из формы мы будем передавать
//  с помощью AJAX.

// Добавьте обработчик отправки формы, если ещё этого не сделали, который бы отменял действие формы по умолчанию и отправлял данные формы посредством fetch на сервер.

// Реализуйте возвращение формы в исходное состояние при успешной отправке, а также показ сообщения пользователю.

// Если при отправке данных произошла ошибка запроса, покажите соответствующее сообщение.

// Доработайте обработчик закрытия формы, чтобы кроме закрытия формы он сбрасывал введённые пользователем данные и возвращал форму в исходное состояние.
//  Аналогичным образом обработайте нажатие на кнопку сброса.
// 3. Отправка данных на сервер
// 3.1. После заполнения всех данных, при нажатии на кнопку «Отправить», все данные из формы, включая изображения, с помощью AJAX-запроса отправляются на сервер
//  https://28.javascript.pages.academy/kekstagram методом POST с типом multipart/form-data. На время выполнения запроса к серверу кнопка «Отправить» блокируется.

// 3.2. Страница реагирует на неправильно введённые значения в форму. Если данные, введённые в форму, не соответствуют ограничениям, указанным
//  в пунктах 2.3 и 2.4, форму невозможно отправить на сервер. При попытке отправить форму с неправильными данными, отправки не происходит,
//  а пользователю показываются ошибки для неверно заполненных полей (для проверки данных используется сторонняя библиотека Pristine).

// 3.3. При успешной отправке формы форма редактирования изображения закрывается, все данные, введённые в форму, и контрол фильтра приходят в исходное состояние:

// масштаб возвращается к 100%;
// эффект сбрасывается на «Оригинал»;
// поля для ввода хэш-тегов и комментария очищаются;
// поле загрузки фотографии, стилизованное под букву «О» в логотипе, очищается.
// 3.4. Если отправка данных прошла успешно, показывается соответствующее сообщение. Разметку сообщения, которая находится
// в блоке #success внутри шаблона template, нужно разместить перед закрывающим тегом </body>. Сообщение должно исчезать после нажатия на
// кнопку .success__button, по нажатию на клавишу Esc и по клику на произвольную область экрана за пределами блока с сообщением.

// 3.5. Если при отправке данных произошла ошибка запроса, нужно показать соответствующее сообщение. Разметку сообщения,
// которая находится в блоке #error внутри шаблона template, нужно разместить перед закрывающим тегом </body>. Сообщение
// должно исчезать после нажатия на кнопку .error__button, по нажатию на клавишу Esc и по клику на произвольную область
// экрана за пределами блока с сообщением. В таком случае вся введённая пользователем информация сохраняется, чтобы у него была возможность отправить форму повторно.

// 3.6. Нажатие на кнопку #upload-cancel приводит к закрытию формы и возвращению всех данных и контрола фильтра к исходному состоянию (описано в пункте 3.3).
// Поле загрузки фотографии, стилизованное под букву «О» в логотипе, очищается.
